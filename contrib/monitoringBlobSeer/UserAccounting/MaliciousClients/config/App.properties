######################## LUS Configuration ##############################
lia.Monitor.debug = false

#  Place your LUSs and your Farm group here
#  Separate multiple values by ","
lia.Monitor.LUSs = monalisa.cern.ch,monalisa.cacr.caltech.edu

# REPLACE THIS WITH YOUR OWN GROUP !!!
# You can gather data from several groups by providing a comma-separated
# list of group names. Take care, the names are case-sensitive.
lia.Monitor.group = BlobMonitor

#########################################################################

################## Publish repository statistics ########################
# Export repository statistics to a list of services that is contained in
# the file at this address

lia.Repository.ApMonExport.ConfigFile=http://monalisa.caltech.edu/repository.conf
#########################################################################

################# Database configuration ################################
lia.Monitor.jdbcDriverString = org.postgresql.Driver

#Default Values used in 'pgsql_store'
lia.Monitor.ServerName = 131.254.11.254
lia.Monitor.DatabaseName = postgres2
lia.Monitor.DatabasePort = 5432
lia.Monitor.UserName = mvlad
lia.Monitor.Pass = pg
#########################################################################

##################### Store Client configuration follows ################
## Replace the original timestamp of the data with this machine's current
## time. If you trust the services' time settings you can set this to 
## false in order to keep the original timestamp set by the service.
lia.Monitor.JStore.storeLocalTime=true

##default config
##  Global parameters to be stored
#lia.Monitor.JiniClient.Store.global_params=Load5,CPU_USR,eth0_IN,eth0_OUT,mem_used

##  Predicates to register with
##  Separate multiple predicated by ","
##  One predicate can look like:
##  Farm/Cluster/Node/start_time/end_time/function_list
##  Function list contains function names separated by "|"
##
##  Rule of thumb: add the exact predicates for the data you want to store,
##  do NOT put something like */*/* ... 
##
#lia.Monitor.JiniClient.Store.predicates=*/WAN/*/-1/-1/%_IN|%_OUT,*/Master/*/-1/-1/Load5|%_IN|%_OUT,*/MonaLisa/*/-1/-1/*
#lia.Monitor.JiniClient.Store.predicates=jacob/MonaLisa/*/-1/-1/CPU_usr|Load5|eth0_IN|eth0_OUT

##NOTES(tylor): DO NOT put the predicates in two lines!!!!!
lia.Monitor.JiniClient.Store.predicates=*/Blob_IO/*/-1/-1/*,*/VManager/*/-1/-1/*,*/ApMon_SysMon/*/-1/-1/mem_used|cpu_usr|eth0_in|eth0_out


## DO NOT STORE in the database data that matches one of these predicates
##
## The number of CPUs is only used to display real-time statistics, we don't need history for this parameter|load5
#lia.Monitor.JiniClient.Store.dontStore=jacob/Blob_IO/*/-1/-1/*

##Some examples:
#lia.Monitor.JiniClient.Store.global_params=Load5,TotalIO_Rate_IN,TotalIO_Rate_OUT,NoCPUs
#lia.Monitor.JiniClient.Store.predicates=caltech/Master/*,caltech/JOBS/*
#lia.Monitor.JiniClient.Store.predicates=slac/%IEPM-BW%/*/-43200000,*/Master/*/-1/-1/Load5
#lia.Monitor.JiniClient.Store.predicates=*/Master/*/-1/-1/Load5|%_IN|%_OUT,*/ABPing/*/-1,*/MonaLisa/*/-1/-1/Cpu_%
#########################################################################

########################### Logging options #############################
#logging options
handlers= java.util.logging.ConsoleHandler
#.level=FINEST
.level = INFO
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
#########################################################################
  
################ Store configuration ####################################
lia.Monitor.readonly.store = false

lia.Monitor.Store.TransparentStoreFast.web_writes = 3

##   There is one table for each interval you want data stored to
##
##   One table description looks like :
## lia.Monitor.Store.TransparentStoreFast.writer_N.total_time=<length in seconds of the interval you want data to be stored on>
## lia.Monitor.Store.TransparentStoreFast.writer_N.samples=<number of values to be stored on this interval, must be greater than 0>
## lia.Monitor.Store.TransparentStoreFast.writer_N.table_name=<table name, should be unique>
## lia.Monitor.Store.TransparentStoreFast.writer_N.descr=<description for this interval, will be displayed on the web pages>
## lia.Monitor.Store.TransparentStoreFast.writer_N.writemode=<write mode>
##
##   Possible values for write mode are :
##
## 0  (default if not specified otherwise) : write average values to this table, one for each total_time/samples seconds (Result objects)
## 1  : write every value received, do not do any average (Result objects)
##
## 2  : special table for storing objects (eResult objects)
##
## 3  : write average values to a in-memory table, no data is written on the disk
## 4  : write every value to a in-memory table, no data is written on the disk
##
## 5  : write average values to an optimized sql table
## 6  : write every value to an optimized sql table
##
## 7  : average values in separate table for each unique ID (this is the preferred method now)
## 8  : every value to a separate table for each unique ID
## 
## WARNING : modes 7 and 8 work ONLY with PostgreSQL DBMS, do not try to use them with MySQL
##
## WARNING : modes 7 and 8 work well with up to 10000-12000 tables. So you should limit the data you
##           gather to something like 10000/no_of_writers unique Farm/Cluster/Node/Function combinations.
##           If you have many more unique IDs you can try tuning the PostgreSQL parameters or you can use
##           writemode 5. Writemode 5 is good for storing many different IDs but it is not so good at
##           retrieving data from the database because a single table is used to store all the data.
##
##
##   If the repository receives many different parameters (for example netflow statistics etc), you should use
## writemode 0 or 1 because you might run into memory problems.
##
##
##   When write mode is 1,2,4,6 or 8, the "samples" value is ignored, all the data that is received is stored to the database
##   
##   For all the tables data older than now()-total_time is deleted.
## 
##   Only tables with write mode=0, 3, 5 or 7 are shown on the web page



# Mediated data, 1 sample each minute
lia.Monitor.Store.TransparentStoreFast.writer_0.total_time=31536000
lia.Monitor.Store.TransparentStoreFast.writer_0.samples=525600
lia.Monitor.Store.TransparentStoreFast.writer_0.table_name=monitor_1y_1min
lia.Monitor.Store.TransparentStoreFast.writer_0.descr=1y 1min
lia.Monitor.Store.TransparentStoreFast.writer_0.writemode=8

# Mediated data, 10 sample each second
lia.Monitor.Store.TransparentStoreFast.writer_1.total_time=31536000
lia.Monitor.Store.TransparentStoreFast.writer_1.samples=31536000
lia.Monitor.Store.TransparentStoreFast.writer_1.table_name=monitor_1y_1sec
lia.Monitor.Store.TransparentStoreFast.writer_1.descr=1y 1sec
lia.Monitor.Store.TransparentStoreFast.writer_1.writemode=8



# Generic object storage. The value is a serialized form of the Java object that is received.
#You can retrieve this data through the WebSerices interface.
lia.Monitor.Store.TransparentStoreFast.writer_2.total_time=604800
lia.Monitor.Store.TransparentStoreFast.writer_2.table_name=monitor_1w_obj
lia.Monitor.Store.TransparentStoreFast.writer_2.descr=1week obj
lia.Monitor.Store.TransparentStoreFast.writer_2.writemode=2




#########################################################################

######################Filters
#lia.Monitor.JiniClient.Store.dynamic_filters=filters.myFilter
lia.Monitor.JiniClient.Store.dynamic_filters=mon.filters.BSFilter

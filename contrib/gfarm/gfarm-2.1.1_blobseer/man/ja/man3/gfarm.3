.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "GFARM" "3" "22 August 2005" "Gfarm" ""
.SH NAME
gfarm \- Gfarm ネイティブ API ライブラリ
.SH SYNOPSIS

.nf
#include <gfarm/gfarm.h>
.fi
.SH "DESCRIPTION"
.PP
gfarm ライブラリは，gfarm ファイルシステムや，スケジューリング
機能に対するインターフェースを提供します．このマニュアルはライブラリ
の概要を記述します．各関数の詳細は，関数単位のマニュアルを参照して
ください．
.SS "初期化／終了処理"
.PP
\fBgfarm_initialize\fR(3) 関数は gfarm ライブラリの初期化に，
\fBgfarm_terminate\fR(3) 関数は gfarm ライブラリの終了処理に用います．
.SS "ファイル入出力処理"
.PP
\fBgfs_pio_set_local\fR(3) 関数は，並列プロセスの初期化として，自ノードのノード番号と
総ノード数の設定に用います．
既存のファイルをストリームとしてオープンするには
\fBgfs_pio_open\fR(3) 関数を，
新規ファイルを作成してストリームとしてオープンするには
\fBgfs_pio_create\fR(3) 関数を用います．
ファイルのクローズは
\fBgfs_pio_close\fR(3) 関数を使います．
\fBgfs_pio_set_view_index\fR(3) 関数と
\fBgfs_pio_set_view_local\fR(3) 関数は，
並列ファイルのアクセス方法を指定します．
.PP
\fBgfs_pio_error\fR(3) 関数はオープンしているストリームに関してエラーが生じているか
を判別し，
\fBgfs_pio_eof\fR(3) 関数は読み込みオープンしているストリームがファイル
末尾に達しているかを判別します．
\fBgfs_pio_seek\fR(3) 関数は，ストリーム中の現在位置を変更します．
.PP
\fBgfs_pio_getc\fR(3) 関数はストリームから一文字読み込み，
\fBgfs_pio_ungetc\fR(3) 関数は逆に読み込んだ一文字をストリームに戻します．
\fBgfs_pio_getline\fR(3) 関数や
\fBgfs_pio_gets\fR(3) 関数，
\fBgfs_pio_readline\fR(3) 関数は，ストリームから一行を読み込み，
\fBgfs_pio_readdelim\fR(3) 関数は，ストリームから指定したデリミタまでを読み込みます．
\fBgfs_pio_read\fR(3) 関数は，ストリームから指定したバイト数だけ読み込みます．
.PP
\fBgfs_pio_putc\fR(3) 関数はストリームへ一文字書きだし，
\fBgfs_pio_putline\fR(3) 関数や
\fBgfs_pio_puts\fR(3) 関数はストリームへ一行書きだします．
\fBgfs_pio_write\fR(3) 関数は，ストリームへ指定したバイト数だけ書き込みます．
\fBgfs_pio_flush\fR(3) 関数や，
\fBgfs_pio_sync\fR(3) 関数，
\fBgfs_pio_datasync\fR(3) 関数は，バッファリングしているデータを記憶装置に書き出します．
\fBgfs_pio_truncate\fR(3) 関数は，ファイルのサイズを変更します．
.SS "ディレクトリアクセス"
.PP
\fBgfs_chdir\fR(3) 関数は，カレント作業ディレクトリを変更します．
\fBgfs_realpath\fR(3) 関数は，引数のフルパス名を返します．
.PP
\fBgfs_opendir\fR(3) 関数でディレクトリをオープンすると，
\fBgfs_readdir\fR(3) 関数で，そのディレクトリを構成するエントリを得ることが
できます．オープンしたディレクトリへのアクセスは，
\fBgfs_closedir\fR(3) 関数で終了します．
.PP
\fBgfs_glob_init\fR(3) 関数で初期化した gfs_glob_t を
\fBgfs_glob\fR(3) 関数に渡すことで，ワイルドカードの展開を行うことが
できます．
利用が終わったら，この領域は
\fBgfs_glob_free\fR(3) 関数で開放します．
\fBgfs_glob_add\fR(3) 関数は，gfs_glob_t にエントリを追加するのに用います．
.SS "ファイル／ディレクトリ操作"
.PP
\fBgfs_chmod\fR(3) 関数でファイルのモードを変更し，
\fBgfs_utimes\fR(3) 関数でファイルの更新時刻とアクセス時刻を変更します．
.PP
\fBgfs_mkdir\fR(3) 関数はディレクトリを作成し，
\fBgfs_rmdir\fR(3) 関数はディレクトリを削除します．
\fBgfs_unlink\fR(3) 関数はファイルを削除し，
\fBgfs_unlink_section\fR(3) 関数は並列ファイルを構成するフラグメントを削除します．
\fBgfs_rename\fR(3) 関数はディレクトリやファイルを改名します．
.PP
\fBgfs_stat\fR(3) 関数は指定したファイルあるいはディレクトリのサイズや
更新時刻などの情報を返します．
この関数が返した gfs_stat 構造体は
\fBgfs_stat_free\fR(3) 関数を用いて解放する必要があります．
.SS "ユーティリティ関数"
.PP
\fBgfarm_hostlist_read\fR(3) 関数，
\fBgfarm_import_fragment_config_read\fR(3) 関数，および
\fBgfarm_import_fragment_size_alloc\fR(3) 関数は，並列ファイルをフラグメント化して登録する際に
使うユーティリティ関数です．利用方法の例は
\fBgfimport_text\fR(1) コマンドや
\fBgfimport_fixed\fR(1) コマンドの
ソースを参照してください．
.SS "文字列配列操作ユーティリティ"
.PP
文字列配列を表す gfarm_stringlist 型の変数は，
\fBgfarm_stringlist_init\fR(3) 関数で初期化し，
\fBgfarm_stringlist_add\fR(3) 関数で文字列を一つ追加し，
\fBgfarm_stringlist_cat\fR(3) 関数で文字列を複数追加し，
\fBgfarm_stringlist_free\fR(3) 関数で解放することができます．
文字列配列の各要素文字列には
\fBgfarm_stringlist_elem\fR(3) 関数あるいは
GFARM_STRINGLIST_ELEM() マクロでアクセスすることができます．
また，文字列配列を構成する文字列の数は
\fBgfarm_stringlist_length\fR(3) 関数で得ることができます．
.PP
\fBgfarm_strings_free_deeply\fR(3) 関数は，文字列配列およびそれを構成する各文字列に対して
標準ライブラリ関数の free() を呼び出して解放します．
.SS "文字列配列操作ユーティリティマクロ"
.TP
\fBGFARM_STRINGLIST_ELEM(list, i)\fR
gfarm_stringlist 型の \fIlist\fR 引数が表す文字列配列の
\fIi\fR 番目の要素を
表すマクロです．このマクロは左辺値として使えます．
値として評価した場合には
\fBgfarm_stringlist_elem\fR(3) 関数と同一の結果を返します．
.TP
\fBGFARM_STRINGLIST_STRARRAY(list)\fR
gfarm_stringlist 型の \fIlist\fR 引数が
表す文字列配列の先頭要素へのポインタを返します．
返り値は，文字へのポインタへのポインタとなります．
.SS "内部関数"
.PP
\fBgfarm_url_program_register\fR(3) 関数，
\fBgfarm_url_hosts_schedule\fR(3) 関数，
\fBgfarm_url_fragments_replicate\fR(3) 関数，
\fBgfarm_url_program_deliver\fR(3) 関数，
\fBgfarm_url_section_replicate_from_to\fR(3) 関数，および
\fBgfarm_url_section_replicate_to\fR(3) 関数は，gfarm が内部的に利用している関数です．
歴史的理由でマニュアルも提供されていますが，将来仕様が変更される
可能性があります．
